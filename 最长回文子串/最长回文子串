思路：使用两个指针，一个向前找，一个向后找
对形如：abcba的调用第一个for循环
对形如：abb的调用第二个for循环

public class Solution {
    /*
     * @param s: input string
     * @return: the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        // write your code here
        int length = s.length();
        if(length == 1)
            return s;
        int lo,hi;
        int max = 0,count = 0,start = 0;
        boolean flag = false;
        for(int i = 0;i < length;i++){
            lo = i;
            hi = i + 2;
            while(lo >= 0 && hi < length && s.charAt(lo) == s.charAt(hi)){
                count++;
                if(count > max){
                    start = lo;
                    max = count;
                }
                lo--;
                hi++;
            }
            count = 0;
        }
        
        for(int i = 0;i < length;i++){
            lo = i;
            hi = i + 1;
            while(lo >= 0 && hi < length && s.charAt(lo) == s.charAt(hi)){
                count++;
                if(count > max){
                    flag = true;
                    start = lo;
                    max = count;
                }
                lo--;
                hi++;
            }
            count = 0;
        }
        if(flag)
            return s.substring(start,start + 2*max);
        else
            return s.substring(start,start + 2*max+1);
    }
}
